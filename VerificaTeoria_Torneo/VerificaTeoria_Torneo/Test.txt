using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace VerificaTeoria_Torneo.Tests
{
    [TestClass]
    public class TorneoTests
    {
        private Giocatore giocatore1;
        private Giocatore giocatore2;
        private Giocatore giocatore3;
        private Torneo torneo;
        
        giocatore1 = new Giocatore("Giocatore 1", DateTime.Now, 100, 1);
        giocatore2 = new Giocatore("Giocatore 2", DateTime.Now, 200, 2);
        giocatore3 = new Giocatore("Giocatore 3", DateTime.Now, 150, 3);
        Giocatore[] giocatori = { giocatore1, giocatore2, giocatore3 };
        torneo = new Torneo(giocatori, 10);
        

        [TestMethod]
        public void AggiungiPartitaTest()
        {
            Partita partita = new Partita(giocatore1, giocatore2, giocatore1);
            torneo.AggiungiPartita(partita);

            Assert.AreEqual(partita, torneo.RisultatiGiocatori[0][0]);
            Assert.AreEqual(partita, torneo.RisultatiGiocatori[1][0]);
        }

        [TestMethod]
        public void CalcolaPartiteGiocateTest()
        {
            Partita partita1 = new Partita(giocatore1, giocatore2, giocatore1);
            Partita partita2 = new Partita(giocatore1, giocatore3, giocatore3);
            torneo.AggiungiPartita(partita1);
            torneo.AggiungiPartita(partita2);

            Assert.AreEqual(2, torneo.CalcolaPartiteGiocate(giocatore1));
            Assert.AreEqual(1, torneo.CalcolaPartiteGiocate(giocatore2));
            Assert.AreEqual(1, torneo.CalcolaPartiteGiocate(giocatore3));
        }

        [TestMethod]
        [ExpectedException(typeof(Exception), "Giocatore non presente nel torneo")]
        public void CalcolaPartiteGiocateGiocatoreNonPresenteTest()
        {
            Giocatore giocatoreNonPresente = new Giocatore("Giocatore 4", DateTime.Now, 100, 4);
            torneo.CalcolaPartiteGiocate(giocatoreNonPresente);
        }

        [TestMethod]
        public void CalcolaVittorieTest()
        {
            Partita partita1 = new Partita(giocatore1, giocatore2, giocatore1);
            Partita partita2 = new Partita(giocatore1, giocatore3, giocatore3);
            torneo.AggiungiPartita(partita1);
            torneo.AggiungiPartita(partita2);

            Assert.AreEqual(1, torneo.CalcolaVittorie(giocatore1));
            Assert.AreEqual(0, torneo.CalcolaVittorie(giocatore2));
            Assert.AreEqual(1, torneo.CalcolaVittorie(giocatore3));
        }

        [TestMethod]
        public void CalcolaSconfitteTest()
        {
            Partita partita1 = new Partita(giocatore1, giocatore2, giocatore1);
            Partita partita2 = new Partita(giocatore1, giocatore3, giocatore3);
            torneo.AggiungiPartita(partita1);
            torneo.AggiungiPartita(partita2);

            Assert.AreEqual(1, torneo.CalcolaSconfitte(giocatore1));
            Assert.AreEqual(1, torneo.CalcolaSconfitte(giocatore2));
            Assert.AreEqual(0, torneo.CalcolaSconfitte(giocatore3));
        }

        [TestMethod]
        public void MatriceRisultatiTest()
        {
            Partita partita1 = new Partita(giocatore1, giocatore2, giocatore1);
            Partita partita2 = new Partita(giocatore1, giocatore3, giocatore3);
            Partita partita3 = new Partita(giocatore2, giocatore3, null);
            torneo.AggiungiPartita(partita1);
            torneo.AggiungiPartita(partita2);
            torneo.AggiungiPartita(partita3);

            int[,] expected = new int[3, 4]
            {
                { 1, -1, 0, 0 },
                { -1, 0, 0, 0 },
                { 1, 0, 0, 0 }
            };

            int[,] result = torneo.MatriceRisultati();

            CollectionAssert.AreEqual(expected, result);
        }
    }
}
